api:
  actions:
    - action: send_raw_rf_${rf_send_pin}
      variables:
        raw_data: 'int[]'
      then:
        - remote_transmitter.transmit_raw:
            transmitter_id: rf_transmitter_${rf_send_pin}
            code: !lambda 'return raw_data;'
            repeat:
              times: 10
              wait_time: 0s
    - action: send_rc_switch_rf_${rf_send_pin}
      variables:
        code: string
        protocol: int
      then:
        - remote_transmitter.transmit_rc_switch_raw:
            transmitter_id: rf_transmitter_${rf_send_pin}
            code: !lambda 'return code;'
            protocol: !lambda 'return remote_base::RC_SWITCH_PROTOCOLS[protocol];'
            repeat:
              times: 10
              wait_time: 0s

remote_receiver:
  - id: rf_receiver_${rf_recv_pin}
    # rmt_symbols: 48
    # filter_symbols: 4
    pin: ${rf_recv_pin}
    tolerance: 50%
    # dump: all
    on_raw:
      - lambda: |-
            if (!id(rf_dump_${rf_recv_pin}).state) return;
            const char* TAG = "RF dump " + ${rf_recv_pin};
            char buffer[256];
            uint32_t buffer_offset = 0;
            buffer_offset += sprintf(buffer, "Received Raw: ");

            for (int32_t i = 0; i < x.size() - 1; i++) {
              const int32_t value = x[i];
              const uint32_t remaining_length = sizeof(buffer) - buffer_offset;
              int written;

              if (i + 1 < x.size() - 1) {
                written = snprintf(buffer + buffer_offset, remaining_length, "%" PRId32 ", ", value);
              } else {
                written = snprintf(buffer + buffer_offset, remaining_length, "%" PRId32, value);
              }

              if (written < 0 || written >= int(remaining_length)) {
                buffer[buffer_offset] = '\0';
                ESP_LOGI(TAG, "%s", buffer);
                buffer_offset = 0;
                written = sprintf(buffer, "  ");
                if (i + 1 < x.size() - 1) {
                  written += sprintf(buffer + written, "%" PRId32 ", ", value);
                } else {
                  written += sprintf(buffer + written, "%" PRId32, value);
                }
              }

              buffer_offset += written;
            }
            if (buffer_offset != 0) {
              ESP_LOGI(TAG, "%s", buffer);
            }
    on_rc_switch:
      - lambda: |-
          std::string result;
          result = "{type: rc_switch, code: ";
          result += format_bin(x.code).substr(40);
          result += ", protocol: ";
          result += to_string(x.protocol);
          result += "}";
          id(rf_code_${rf_recv_pin}).publish_state(result);
      - delay: 200ms
      - lambda: 'id(rf_code_${rf_recv_pin}).publish_state("reset");'

remote_transmitter:
  - id: rf_transmitter_${rf_send_pin}
    pin: ${rf_send_pin}
    carrier_duty_percent: 100%

text_sensor:
  - platform: template
    id: rf_code_${rf_recv_pin}
    name: RF code ${rf_recv_pin}
    icon: "mdi:code-json"

switch:
  - platform: template
    id: rf_dump_${rf_recv_pin}
    name: RF dump ${rf_recv_pin}
    icon: "mdi:record-rec"
    optimistic: true
