api:
  actions:
    - action: send_uart_rf
      variables:
        raw_data: int[]
      then:
        - uart.write: !lambda |-
            std::vector<uint8_t> result;
            result.reserve(raw_data.size());
            for (int value : raw_data)
            {
                result.push_back(static_cast<uint8_t>(value));
            }
            return result;

uart:
  id: uart_bus
  rx_pin: ${rf_recv_pin}
  tx_pin: ${rf_send_pin}
  baud_rate: 9600
  debug:
    dummy_receiver: true
    after:
      delimiter: "\r\n"
    sequence:
      - lambda: |-
          std::string result;
          result = "[";
          for (size_t i = 0; i < bytes.size(); i++)
          {
              if (i > 0)
              {
                  result += ", ";
              }
              result += "0x";
              result += format_hex(bytes[i]);
          }
          result += "]";
          id(rf_code).publish_state(result);
      - delay: 200ms
      - lambda: 'id(rf_code).publish_state("reset");'

text_sensor:
  - platform: template
    id: rf_code
    name: RF code
